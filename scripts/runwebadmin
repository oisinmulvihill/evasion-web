"""
I took this from the pylons list:
   
   http://www.mail-archive.com/pylons-discuss@googlegroups.com/msg08951.html

This should allow me to bbfreeze the webadmin web server - Oisin 2009-12-03.


Run the standalone on the console similar to "paster serve".

This version imports the server and application rather than loading entry
points based on the ``use`` variables in the config file.  However, it does do
a string comparision on the ``use`` values and aborts if point to something
different than what it intends to load.

Make sure you've installed the application, Pylons, and any other dependencies
before running this.
"""
import os
import sys
import os.path
import logging
import threading
import logging.config
from optparse import OptionParser

from paste.deploy.loadwsgi import NicerConfigParser

# Server class and corresponding 'use=' value in config
SERVER_USE_VALUE = "egg:Paste#http"
from paste.httpserver import server_runner as server_factory


# Application factory and corresponding 'use=' value in config
APP_USE_VALUE = "egg:evasion-webadmin"
from webadmin.config.middleware import make_app as app_factory

def get_log():
    return logging.getLogger('webadmin')


def get_config(cp, section, expected_use_value):
    """Get a section from an INI-style config file as a dict.
    
    ``cp`` -- NicerConfigParser.
    ``section`` -- the section to read.
    ``expected_use_value`` -- expected value of ``use`` option in the section.
    
    Aborts if the value of ``use`` doesn't equal the expected value.  This
    indicates Paster would instantiate a different object than we're expecting.
    
    The ``use`` key is removed from the dict before returning.
    """
    defaults = cp.defaults()
    ret = {}
    for option in cp.options(section):
        if option.startswith("set "):  # Override a global option.
            option = option[4:]
        elif option in defaults:       # Don't carry over other global options.
            continue
        ret[option] = cp.get(section, option)
    use = ret.pop("use", "")
    if use != expected_use_value:
        msg = ("unexpected value for 'use=' in section '%s': "
               "expected '%s', found '%s'")
        msg %= (section, expected_use_value, use)
        raise EnvironmentError(msg)
    return ret
    

def go(ini_file):
    """
    Called to create the webapp after first connecting to the 
    stomp broker. Once this is ready the webapp will be started
    so it can start using messaging.
    
    """
    ini_file = os.path.abspath(ini_file)
    if not os.path.exists(ini_file):
        raise OSError("File %s not found" % ini_file)
    
    config_dir = os.path.dirname(ini_file)
    logging.config.fileConfig(ini_file)
    cp = NicerConfigParser(ini_file)
    cp.read(ini_file)
    global_conf = cp.defaults()
    cp._defaults.setdefault("here", config_dir)
    cp._defaults.setdefault("__file__", ini_file)
    server_conf = get_config(cp, "server:main", "egg:Paste#http")
    app_conf = get_config(cp, "app:main", "egg:evasion-webadmin")
    
    #Enable the messaging service:
    import messenger        
    
    class R(messenger.Runnable):
        def ready(self):
            app = app_factory(global_conf, **app_conf)
            serve = server_factory(app, global_conf, **server_conf)
            get_log().info("go: Serving webapp")
            serve(app)   # Serves forever.

    r = R()

    stomp_cfg = dict(
        host = cp.get("Messenger", "host"),
        port = int(cp.get("Messenger", "port")),
        username = cp.get("Messenger", "username"),
        password = cp.get("Messenger", "password"),
        channel = cp.get("Messenger", "channel"),
    )
    
    #Set up the messenger stomp protocol and run with the appmain:
    #messenger.stompprotocol.setup(stomp_cfg, connectedOkHandler=r.connectedOk)
    
    # The goapp will be running inside its own thread, with 
    # the mainloop reserved for twisted.
    #messenger.run(r.run)

    def appmain(isExit):
        app = app_factory(global_conf, **app_conf)
        serve = server_factory(app, global_conf, **server_conf)
        get_log().info("go: Serving webapp")
        serve(app)   # Serves forever.

    messenger.stompprotocol.setup(stomp_cfg)
    messenger.run(appmain)


def main():
    log = logging.getLogger("")
    parser = OptionParser()
                      
    parser.add_option("--config", action="store", dest="config_filename", 
                    default="development.ini",
                    help="This webadmin configuration file used at run time."
                    )
                      
    
    (options, args) = parser.parse_args()

    if not os.path.isfile(options.config_filename):
        sys.stderr.write("The config file name '%s' wasn't found!\n" % options.config_filename)
        sys.exit(1)
        
    go(options.config_filename)


if __name__ == "__main__":
    main()

